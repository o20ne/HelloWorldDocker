#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('HelloWorld:server');
var http = require('http');
var https = require('https');

//////////// HTTP SERVICE ////////////
/**
 * Get port from environment and store in Express.
 */
var ports = [3001, 8000, 8080];

var server;

ports.forEach(function(port) {
  app.set('port', port);

  /**
   * Create HTTP server.
   */
  server = http.createServer(app);


  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', function(){
    onListening(server);
  });
});

// //////////// HTTPS SERVICE ////////////
// var options = {
//   key: '',
//   cert: ''
// };
//
// var secureServer = https.createServer(options, app);
// secureServer.listen(443)
//     .on('listening', function() {
//       onListening(secureServer)
//     });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(serv) {
  var addr = serv.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log("addr.port="+addr.port);
  console.log('Listening on ' + bind);
  debug('Listening on ' + bind);
}
